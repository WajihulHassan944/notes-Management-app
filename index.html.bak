<!DOCTYPE html>
<html>

<head>
    <title>Notes Management App</title>
    <script src="pdfmake/vfs_fonts.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.2/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.2/vfs_fonts.js"></script>
	<link rel="stylesheet" href="style.css">
</head>

<body>
<nav>
	<center><h1>Notes Manageent App</h1></center>
</nav>
    <form id="noteForm">
        <label for="subject">Subject:</label><br>
        <input type="text" id="subject" name="subject"><br>
        <label for="chapterNo">Chapter No:</label><br>
        <input type="number" id="chapterNo" name="chapterNo"><br>
        <label for="chapterName">Chapter Name:</label><br>
        <input type="text" id="chapterName" name="chapterName"><br>
        <label for="text">Text:</label><br>
        <input type="text" id="text" name="text"><br><br>
        <button type="submit">Submit</button>
    </form>
   <table>
        <thead>
            <tr>
                <th>Subject</th>
                <th>Chapter Name</th>
				
                <th>Chapter No</th>
                <th>SAVE / DELETE</th>
            </tr>
        </thead>
        <tbody id="cakesListTableBody"></tbody>
    </table> 
	
	<script>
    document.getElementById('noteForm').addEventListener('submit', async (e) => {
        e.preventDefault();

        const subject = document.getElementById('subject').value;
        const chapterNo = document.getElementById('chapterNo').value;
        const chapterName = document.getElementById('chapterName').value;
        const text = document.getElementById('text').value;

        try {
            const noteData = {
                subject: subject,
                chapterNo: chapterNo,
                chapterName: chapterName,
                text: text
            };

            const response = await fetch('https://energetic-teal-coati.cyclic.app/notes', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(noteData),
            });

            if (response.ok) {
                alert("Data submitted successfully");
            } else {
                alert("Failed to submit data. Please try again.");
            }
        } catch (error) {
            alert('Error submitting data');
            console.error('Error:', error);
        }

        // Clear the form after submitting
        document.getElementById('subject').value = '';
        document.getElementById('chapterNo').value = '';
        document.getElementById('chapterName').value = '';
        document.getElementById('text').value = '';
		location.reload();
    });
</script>



<script>
    // Function to display the cakes on the website
    function displayCakes(cakes) {
        const cakesListTableBody = document.getElementById("cakesListTableBody");
        cakesListTableBody.innerHTML = "";

        cakes.forEach((cake) => {
            const row = document.createElement("tr");

            const subjectCell = document.createElement("td");
            subjectCell.textContent = cake.subject;

            const chapNameCell = document.createElement("td");
            chapNameCell.textContent = cake.chapterName;
			
			
            const chapNameNo = document.createElement("td");
            chapNameNo.textContent = cake.chapterNo;

            const actionsCell = document.createElement("td");
            const savePdfButton = document.createElement("button");
            savePdfButton.textContent = "Save as PDF";
            savePdfButton.addEventListener("click", () => {
                generatePdf(cake);
            });

            const deleteButton = document.createElement("button");
deleteButton.textContent = "Delete";
deleteButton.addEventListener("click", async () => {
  // Display a confirmation dialog before proceeding with deletion
  const confirmDelete = confirm("Are you sure you want to delete this data?");

  if (confirmDelete) {
    try {
      const response = await fetch(
        `https://energetic-teal-coati.cyclic.app/notes/${cake._id}`,
        {
          method: "DELETE",
        }
      );
      if (response.ok) {
        alert("Data deleted successfully");
        // Refresh the cakes list after deletion
        fetchCakes();
      } else {
        throw new Error("Error deleting Data");
      }
    } catch (error) {
      alert("Error deleting data");
      console.error(error);
    }
  } else {
    // User clicked "Cancel," do nothing
    return;
  }
});

			const editButton = document.createElement('button');
            editButton.textContent = 'Edit';
            editButton.addEventListener('click', () => {
                
				populateFormForEdit(cake);
				updateData(cake);
            });


  async function updateData(updatedData) {
        try {
            const response = await fetch(`https://energetic-teal-coati.cyclic.app/notes/${cake._id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(updatedData),
            });

            if (response.ok) {
                alert('Data updated successfully');
                // Refresh the data after the update
                fetchCakes();
            } else {
                throw new Error('Error updating data');
            }
        } catch (error) {
            alert('Error updating data');
            console.error('Error:', error);
        }
    }



            actionsCell.appendChild(savePdfButton);
            actionsCell.appendChild(editButton);
            actionsCell.appendChild(deleteButton);

            row.appendChild(subjectCell);
            row.appendChild(chapNameCell);
            row.appendChild(chapNameNo);
            row.appendChild(actionsCell);

            cakesListTableBody.appendChild(row);
        });
    }

    // Function to fetch the cakes from the backend
    async function fetchCakes() {
        try {
           
            const response = await fetch(
                `https://energetic-teal-coati.cyclic.app/notes`
            );
            if (!response.ok) {
                throw new Error("Error fetching cakes");
            }
            const data = await response.json();
            displayCakes(data);
        } catch (error) {
            console.error("Error:", error);
        }
    }

    const generatePdf = (cake) => {
            const docDefinition = {
                content: [
                    { text: `Subject: ${cake.subject}`, fontSize: 16, bold: true },
                    { text: `Chapter Name: ${cake.chapterName}`, fontSize: 14 },
                    { text: `Chapter No: ${cake.chapterNo}`, fontSize: 14 },
					{ text: `Description: ${cake.text}`, fontSize: 14 },
                ],
            };

            pdfMake.createPdf(docDefinition).download(`${cake.subject}.pdf`);
        };
        // Fetch all the buttons inside the table
        const savePdfButtons = document.querySelectorAll("table button");

        // Attach the click event listener to each "Save as PDF" button
        savePdfButtons.forEach((button) => {
            if (button.textContent === "Save as PDF") {
                button.addEventListener("click", () => {
                    // Find the corresponding cake data
                    const tableRow = button.closest("tr");
                    const dateCell = tableRow.querySelector("td:nth-child(1)").textContent;
                    const titleCell = tableRow.querySelector("td:nth-child(2)").textContent;
                    const descriptionCell = tableRow.querySelector("td:nth-child(3)").textContent;

                    // Create a cake object with the extracted data
                    const cake = {
                        date: dateCell,
                        title: titleCell,
                        description: descriptionCell,
                    };

                    generatePdf(cake);
                });
            }
        });

        // Call fetchCakes when the page loads to display the cakes
        fetchCakes();
    </script>











</body>

</html>
